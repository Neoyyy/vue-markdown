import API from '../http/api';
import qs from 'qs'
//import utils from '../utils/utils'
import axios from '../http/axios'

const actions = {
  // socket_connect: (context, message) => {
  //   console.log("connect actions")
  // },



  addNewFriend({state, commit},friendInfo){
    console.log("add new Friend in action")
    console.log(friendInfo)
    var thisObj = this;
    return new Promise(function (resolve, reject) {
      thisObj.dispatch('http',[API.ADDNEWFRIEND,'post', friendInfo]).then(data =>{
        console.log("add new friend success")
        console.log(data);
        state.friend = data.friend
        resolve(data);
      }).catch(err =>reject(err));
    })
  },
  chat({state, commit}, chatMsg){
    console.log(typeof state.articles)

    state.chatToFriend.chatHistory.push(chatMsg);

    state.friend.forEach(function (groupItem) {
      if (groupItem.id = state.chatToGroup.id){
        groupItem.list.forEach(function (item) {
          if (item.email == state.chatToFriend.email){
            groupItem.list.splice(groupItem.list.indexOf(item),1,state.chatToFriend);

          }
        })
      }
    })

  },
  addNewFriend({state,commit},params){
var user = params.result;
console.log("addnewfriend:" + JSON.stringify(user))
    state.userid = user.mine.email;
    console.log("login result:" + state.userid)
    state.friend = user.friend;
  },
  deleteFriend({state,commit},params){
    var deleteInfo = params.result;
    console.log("Delete friend in action")
    console.log(deleteInfo)
    for (var i = 0;i<state.friend.length;i++){
      console.log("groupname:"+state.friend[i].groupname)
      console.log("delete groupname:"+deleteInfo.groupid)

      if (state.friend[i].groupname == deleteInfo.groupid){
        console.log("find group")
        console.log(state.friend[i])
        for (var j =0;j<state.friend[i].list.length;j++){
          if (state.friend[i].list[j].email == deleteInfo.friendemail){
            console.log("find user")
            console.log(state.friend[i].list[j])
            state.friend[i].list.splice(j,1);
          }
        }
      }
    }

  },
  getHistoryMsg({state, commit}, Msg){
    console.log(JSON.stringify(Msg));

    Msg.forEach(function (msg) {
      var flag =0;
      var MsgItem = JSON.parse(msg);
      state.friend.forEach(function (groupItem) {
        groupItem.list.forEach(function (item) {
          if (item.email == MsgItem.from){
            flag = 1;
            item.chatHistory.push(MsgItem)
            item.unReadMessage = true;
                    //history.push(MsgItem);

          }
        })
      })

      if (flag == 0){
        state.friend[0].list.push({
          "username": MsgItem.from,
          "email":MsgItem.from
          ,"unReadMessage":true,
          "chatHistory":[MsgItem],

        }
        )
      }

    })



  },

  saveAsPDF({state,commit}){
    var params = state.editArticle;
    var thisObj = this;
    console.log("editArticle")
    console.log(params)
    return new Promise(function (resolve, reject) {
      thisObj.dispatch('http',[API.SAVEASPDF,'post',params]).then(data =>{
        console.log("get params ")

        var getParams = {
          type:'pdf',
          fileName:params.title,
          uuid:data.fileName
        }
        console.log("get params ")
        console.log(getParams)
        resolve(getParams);

      }).catch(err =>reject(err));
    })
  },


  saveArticleToServer({state,commit},saveAsOwner){

    var params = state.editArticle;
    // if (state.isLogin){
    //   if (state.editArticle.owneremail != null){
    //     if (state.editArticle.owneremail != state.userid){
    //       params.editemail = state.userid;
    //     }
    //   }else{
    //     params.owneremail = state.userid;
    //     params.editemail = state.userid;
    //
    //   }
    // }
    if (state.isLogin){
      params.editemail = state.userid;
    }
    if (saveAsOwner){
      params.owneremail = state.userid;
      delete params.articleid;
      params.isUpdate = false;
    }else{
      params.isUpdate = true;
    }
    var thisObj = this;
    return new Promise(function (resolve, reject) {
      thisObj.dispatch('http',[API.UPDATEARTICLE,'post', params]).then(data =>{

        state.editArticle = params;
        switch (state.editType){
          case 0:
            state.articles.ipArticles.splice(state.editIndex, 1, state.editArticle);
            break;
          case 1:
            state.articles.ownerArticles.splice(state.editIndex, 1, state.editArticle);
            break;
        }
        resolve(data);
      }).catch(err =>reject(err));

      });




  },
  searchArticle({state, commit}, id){
    var params = {
      articleid:id
    }
    if (state.isLogin){
      params.editemail = state.userid
    }
    var thisObj = this;
    return new Promise(function (resolve, reject) {
      thisObj.dispatch('http',[API.SEARCHARTICLE,'post',params]).then(data =>{
        console.log("get article");
        console.log(data)
        switch (state.editType){
          case 0:
            console.log("替换ip文件")
            state.articles.ipArticles.splice(state.editIndex, 1, state.editArticle);
            break;
          case 1:
            state.articles.ownerArticles.splice(state.editIndex, 1, state.editArticle);
            break;
          case 2:
            state.articles.shareArticle.splice(state.editIndex, 1, state.editArticle);
            break;
        }
        state.articles.shareArticle.push(data)
        state.editType = 2;
        state.editIndex = state.articles.shareArticle.indexOf(data);
        state.editArticle = state.articles.shareArticle[state.editIndex];
        resolve(data);
      }).catch(err =>reject(err));
    })
  },
  deleteFromServer({state, commit}){
    var params = state.editArticle;
    if (state.isLogin){
      params.editemail = state.userid;
    }else{
      params.editemail='';
    }
    var thisObj = this;
    return new Promise(function (resolve, reject) {
      thisObj.dispatch('http',[API.DELETEARTICLE,'post',params]).then(data =>{
        switch (state.editType){
          case 0:
            state.articles.ipArticles.splice(state.editIndex, 1);
            break;
          case 1:
            state.articles.ownerArticles.splice(state.editIndex, 1);
            break;
        }
        if (state.articles.ipArticles[0] == null){

          commit('addNewArticle');
        }
        state.editArticle = state.articles.ipArticles[0];
        state.editIndex = 0;
        state.editType = 0;
        resolve(data);
      }).catch(err =>{
        reject(err);
      })
    })
  },
  getArticles({state, commit}){
    var thisObj = this;
    var params = {};
    if (state.isLogin){
      params.email = state.mine.email;
    }
    return new Promise(function (resolve, reject) {
      thisObj.dispatch('http',[API.GETARTICLELISTS,'post',params]).then(data =>{

        state.articles.ipArticles = data.ipArticles;
        state.articles.ownerArticles = data.ownerArticles;
        console.log("iparticle[0]:")
        console.log(state.articles.ipArticles[0]);
        if (state.articles.ipArticles[0] == null){

          commit('addNewArticle');
        }
        state.editArticle = state.articles.ipArticles[0];
        state.editIndex = 0;
        state.editType = 0;

        resolve(data);
      }).catch(err => reject(err));
    })
  },

  http({ state, commit},config){
    return new Promise(function (resolve,reject) {
      let url = null;
      let method = null;
      let params = null;
      if (Object.prototype.toString.call(config) == '[object Array]') {
        url = config[0];
        method = config[1];
        params = config[2];
      } else if (config.url) {
        url = config.url;
        method = config.method;
        params = config.params;
      } else {
        url = config;
      }
      http(url, method, params).then(data => {
        resolve(data);
      }).catch(err => {
        // 登录状态有误
        if (err.code && err.code == 43) {
          state.isLogin = false;
        }
        reject(err.msg ? err.msg : err);
      })

    })
  }

}








function http(url, method, params) {
  if (!method) method = 'get';
  if (!params) params = {};
  let config = {
    method: method
    ,url:url
  };
  switch (method){
    case 'post':
      config.data = qs.stringify(params,{ indices: false });
      break;
    default:
      config.url = config.url + utils.toParamStr(params);
      break;
  }

  return new Promise(function (resolve,reject) {
    axios(config).then(function (data) {
      console.log(`response data => ${JSON.stringify(data)}`);
      resolve(data);
    }).catch(function (errMsg) {
      console.error(`response errMsg => ${JSON.stringify(errMsg)}`)
      reject(errMsg);
    })
  });
};



export default actions;
